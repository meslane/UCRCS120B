
FinalProject.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000150  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001a4  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001d4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000070  00000000  00000000  00000214  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000b4a  00000000  00000000  00000284  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000089b  00000000  00000000  00000dce  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003f9  00000000  00000000  00001669  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000c8  00000000  00000000  00001a64  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000457  00000000  00000000  00001b2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001fc  00000000  00000000  00001f83  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000050  00000000  00000000  0000217f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	4d d0       	rcall	.+154    	; 0x134 <main>
  9a:	58 c0       	rjmp	.+176    	; 0x14c <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <delay_ms>:

void delay_ms(int miliSec) //for 16 Mhz crystal

{
	int i,j;
	for(i=0;i<miliSec;i++)
  9e:	40 e0       	ldi	r20, 0x00	; 0
  a0:	50 e0       	ldi	r21, 0x00	; 0
  a2:	0c c0       	rjmp	.+24     	; 0xbc <delay_ms+0x1e>
	for(j=0;j<(2*775);j++)
	{
		asm("nop");
  a4:	00 00       	nop
void delay_ms(int miliSec) //for 16 Mhz crystal

{
	int i,j;
	for(i=0;i<miliSec;i++)
	for(j=0;j<(2*775);j++)
  a6:	2f 5f       	subi	r18, 0xFF	; 255
  a8:	3f 4f       	sbci	r19, 0xFF	; 255
  aa:	02 c0       	rjmp	.+4      	; 0xb0 <delay_ms+0x12>
  ac:	20 e0       	ldi	r18, 0x00	; 0
  ae:	30 e0       	ldi	r19, 0x00	; 0
  b0:	2e 30       	cpi	r18, 0x0E	; 14
  b2:	66 e0       	ldi	r22, 0x06	; 6
  b4:	36 07       	cpc	r19, r22
  b6:	b4 f3       	brlt	.-20     	; 0xa4 <delay_ms+0x6>

void delay_ms(int miliSec) //for 16 Mhz crystal

{
	int i,j;
	for(i=0;i<miliSec;i++)
  b8:	4f 5f       	subi	r20, 0xFF	; 255
  ba:	5f 4f       	sbci	r21, 0xFF	; 255
  bc:	48 17       	cp	r20, r24
  be:	59 07       	cpc	r21, r25
  c0:	ac f3       	brlt	.-22     	; 0xac <delay_ms+0xe>
	for(j=0;j<(2*775);j++)
	{
		asm("nop");
	}
  c2:	08 95       	ret

000000c4 <LCD_WriteCommand>:
	LCD_WriteCommand(0x01);
	delay_ms(10);
}

void LCD_WriteCommand (unsigned char Command) {
	CLR_BIT(CONTROL_BUS,RS);
  c4:	9b b1       	in	r25, 0x0b	; 11
  c6:	9f 7b       	andi	r25, 0xBF	; 191
  c8:	9b b9       	out	0x0b, r25	; 11
	DATA_BUS = Command;
  ca:	85 b9       	out	0x05, r24	; 5
	SET_BIT(CONTROL_BUS,E);
  cc:	8b b1       	in	r24, 0x0b	; 11
  ce:	80 68       	ori	r24, 0x80	; 128
  d0:	8b b9       	out	0x0b, r24	; 11
	asm("nop");
  d2:	00 00       	nop
	CLR_BIT(CONTROL_BUS,E);
  d4:	8b b1       	in	r24, 0x0b	; 11
  d6:	8f 77       	andi	r24, 0x7F	; 127
  d8:	8b b9       	out	0x0b, r24	; 11
	delay_ms(2); // ClearScreen requires 1.52ms to execute
  da:	82 e0       	ldi	r24, 0x02	; 2
  dc:	90 e0       	ldi	r25, 0x00	; 0
  de:	df cf       	rjmp	.-66     	; 0x9e <delay_ms>
  e0:	08 95       	ret

000000e2 <LCD_ClearScreen>:
#define E 7			// pin number of uC connected to pin 6 of LCD disp.

/*-------------------------------------------------------------------------*/

void LCD_ClearScreen(void) {
	LCD_WriteCommand(0x01);
  e2:	81 e0       	ldi	r24, 0x01	; 1
  e4:	ef cf       	rjmp	.-34     	; 0xc4 <LCD_WriteCommand>
  e6:	08 95       	ret

000000e8 <LCD_Cursor>:
		LCD_WriteData(*string++);
	}
}

void LCD_Cursor(unsigned char column) {
	if ( column < 17 ) { // 16x1 LCD: column < 9
  e8:	81 31       	cpi	r24, 0x11	; 17
  ea:	18 f4       	brcc	.+6      	; 0xf2 <LCD_Cursor+0xa>
		// 16x2 LCD: column < 17
		LCD_WriteCommand(0x80 + column - 1);
  ec:	81 58       	subi	r24, 0x81	; 129
  ee:	ea cf       	rjmp	.-44     	; 0xc4 <LCD_WriteCommand>
  f0:	08 95       	ret
		} else {
		LCD_WriteCommand(0xB8 + column - 9);	// 16x1 LCD: column - 1
  f2:	81 55       	subi	r24, 0x51	; 81
  f4:	e7 cf       	rjmp	.-50     	; 0xc4 <LCD_WriteCommand>
  f6:	08 95       	ret

000000f8 <LCD_init>:
}

void LCD_init(void) {

	//wait for 100 ms.
	delay_ms(100);
  f8:	84 e6       	ldi	r24, 0x64	; 100
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	d0 df       	rcall	.-96     	; 0x9e <delay_ms>
	LCD_WriteCommand(0x38);
  fe:	88 e3       	ldi	r24, 0x38	; 56
 100:	e1 df       	rcall	.-62     	; 0xc4 <LCD_WriteCommand>
	LCD_WriteCommand(0x06);
 102:	86 e0       	ldi	r24, 0x06	; 6
 104:	df df       	rcall	.-66     	; 0xc4 <LCD_WriteCommand>
	LCD_WriteCommand(0x0f);
 106:	8f e0       	ldi	r24, 0x0F	; 15
 108:	dd df       	rcall	.-70     	; 0xc4 <LCD_WriteCommand>
	LCD_WriteCommand(0x01);
 10a:	81 e0       	ldi	r24, 0x01	; 1
 10c:	db df       	rcall	.-74     	; 0xc4 <LCD_WriteCommand>
	delay_ms(10);
 10e:	8a e0       	ldi	r24, 0x0A	; 10
 110:	90 e0       	ldi	r25, 0x00	; 0
 112:	c5 cf       	rjmp	.-118    	; 0x9e <delay_ms>
 114:	08 95       	ret

00000116 <LCD_WriteData>:
 116:	9b b1       	in	r25, 0x0b	; 11
	CLR_BIT(CONTROL_BUS,E);
	delay_ms(2); // ClearScreen requires 1.52ms to execute
}

void LCD_WriteData(unsigned char Data) {
	SET_BIT(CONTROL_BUS,RS);
 118:	90 64       	ori	r25, 0x40	; 64
 11a:	9b b9       	out	0x0b, r25	; 11
	DATA_BUS = Data;
 11c:	85 b9       	out	0x05, r24	; 5
	SET_BIT(CONTROL_BUS,E);
 11e:	8b b1       	in	r24, 0x0b	; 11
 120:	80 68       	ori	r24, 0x80	; 128
 122:	8b b9       	out	0x0b, r24	; 11
	asm("nop");
 124:	00 00       	nop
	CLR_BIT(CONTROL_BUS,E);
 126:	8b b1       	in	r24, 0x0b	; 11
 128:	8f 77       	andi	r24, 0x7F	; 127
 12a:	8b b9       	out	0x0b, r24	; 11
	delay_ms(1);
 12c:	81 e0       	ldi	r24, 0x01	; 1
 12e:	90 e0       	ldi	r25, 0x00	; 0
 130:	b6 cf       	rjmp	.-148    	; 0x9e <delay_ms>
 132:	08 95       	ret

00000134 <main>:
#include <avr/interrupt.h>

#include "io.h"

int main(void) {
    DDRB = 0xFF; PORTB = 0;//LCD
 134:	8f ef       	ldi	r24, 0xFF	; 255
 136:	84 b9       	out	0x04, r24	; 4
 138:	15 b8       	out	0x05, r1	; 5
	DDRD = 0xFF; PORTD = 0;//LCD
 13a:	8a b9       	out	0x0a, r24	; 10
 13c:	1b b8       	out	0x0b, r1	; 11
	
	LCD_init();
 13e:	dc df       	rcall	.-72     	; 0xf8 <LCD_init>
	LCD_ClearScreen();
 140:	d0 df       	rcall	.-96     	; 0xe2 <LCD_ClearScreen>
	//LCD_DisplayString(1, "Hello World!");
	LCD_Cursor(1);
 142:	81 e0       	ldi	r24, 0x01	; 1
 144:	d1 df       	rcall	.-94     	; 0xe8 <LCD_Cursor>
	LCD_WriteData('A');
 146:	81 e4       	ldi	r24, 0x41	; 65
 148:	e6 df       	rcall	.-52     	; 0x116 <LCD_WriteData>
 14a:	ff cf       	rjmp	.-2      	; 0x14a <main+0x16>

0000014c <_exit>:
 14c:	f8 94       	cli

0000014e <__stop_program>:
 14e:	ff cf       	rjmp	.-2      	; 0x14e <__stop_program>
